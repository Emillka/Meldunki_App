name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Ręczne uruchamianie z Actions

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Testy jednostkowe i integracyjne
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: magenta-mass/package-lock.json

      - name: Install dependencies
        run: |
          cd magenta-mass
          npm ci

      - name: Run TypeScript check
        run: |
          cd magenta-mass
          npx astro check

      - name: Run unit tests
        run: |
          cd magenta-mass
          npm run test:unit
        env:
          CI: true
          NODE_ENV: test

      - name: Run API tests
        run: |
          cd magenta-mass
          npm run test:api
        env:
          CI: true
          NODE_ENV: test
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run integration tests
        run: |
          cd magenta-mass
          npm run test:integration
        env:
          CI: true
          NODE_ENV: test
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run performance tests
        run: |
          cd magenta-mass
          npm run test:performance
        env:
          CI: true
          NODE_ENV: test

      - name: Run security tests
        run: |
          cd magenta-mass
          npm run test:security
        env:
          CI: true
          NODE_ENV: test

      - name: Generate test coverage
        run: |
          cd magenta-mass
          npm run test:coverage
        env:
          CI: true
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./magenta-mass/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 2: Testy E2E
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: magenta-mass/package-lock.json

      - name: Install dependencies
        run: |
          cd magenta-mass
          npm ci

      - name: Install Playwright browsers
        run: |
          cd magenta-mass
          npx playwright install --with-deps

      - name: Build application
        run: |
          cd magenta-mass
          npm run build
        env:
          NODE_ENV: production
          PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}

      - name: Start application
        run: |
          cd magenta-mass
          npm run preview &
          sleep 10
        env:
          NODE_ENV: production
          PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}

      - name: Run E2E tests
        run: |
          cd magenta-mass
          npm run test:e2e
        env:
          CI: true
          NODE_ENV: test
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          TEST_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          TEST_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_ROLE_KEY }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: magenta-mass/playwright-report/
          retention-days: 30

  # Job 3: Build produkcyjny
  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: magenta-mass/package-lock.json

      - name: Install dependencies
        run: |
          cd magenta-mass
          npm ci

      - name: Build application
        run: |
          cd magenta-mass
          npm run build
        env:
          NODE_ENV: production
          PUBLIC_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: magenta-mass/dist/
          retention-days: 7

  # Job 4: Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 5: Deploy (tylko dla main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: magenta-mass/dist/

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            cd /opt/meldunki-app
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
            docker system prune -f

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.PROD_URL }}/api/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # Tutaj można dodać powiadomienia (Slack, Discord, email)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Tutaj można dodać powiadomienia o błędzie