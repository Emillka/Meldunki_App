---
// Strona dokumentacji GitHub Actions
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<Layout 
  title="Pierwsze kroki GitHub Actions - FireLog" 
  description="Kompleksowy przewodnik po GitHub Actions - automatyzacja CI/CD dla projektów FireLog"
  keywords="GitHub Actions, CI/CD, automatyzacja, DevOps, FireLog, tutorial"
>
  <div class="min-h-screen bg-background flex flex-col">
    <!-- Header -->
    <Header currentPath="/github-actions" />
    
    <!-- Main Content -->
    <div class="flex-1 container mx-auto px-4 py-8">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-foreground mb-2">Pierwsze kroki GitHub Actions</h1>
        <p class="text-muted-foreground">Kompleksowy przewodnik po automatyzacji CI/CD</p>
        <p class="text-muted-foreground">Ostatnia aktualizacja: {new Date().toLocaleDateString('pl-PL')}</p>
      </div>

      <!-- Content -->
      <div class="prose prose-lg max-w-4xl mx-auto">
        <h2>1. Wprowadzenie do GitHub Actions</h2>
        <p>
          GitHub Actions to platforma do automatyzacji procesów CI/CD (Continuous Integration/Continuous Deployment) 
          bezpośrednio w repozytorium GitHub. Pozwala na tworzenie, testowanie i wdrażanie kodu w sposób automatyczny.
        </p>

        <h3>Kluczowe korzyści:</h3>
        <ul>
          <li><strong>Automatyzacja</strong> - eliminuje ręczne procesy</li>
          <li><strong>Integracja</strong> - bezpośrednia integracja z GitHub</li>
          <li><strong>Skalowalność</strong> - obsługa projektów każdej wielkości</li>
          <li><strong>Elastyczność</strong> - bogata biblioteka akcji i możliwość tworzenia własnych</li>
        </ul>

        <h2>2. Podstawowe pojęcia</h2>
        
        <h3>Workflow</h3>
        <p>
          Workflow to automatyczny proces składający się z jednego lub więcej zadań (jobs). 
          Definiowany jest w pliku YAML w katalogu <code>.github/workflows/</code>.
        </p>

        <h3>Job</h3>
        <p>
          Job to zestaw kroków wykonywanych w tym samym środowisku (runner). 
          Jobs mogą być wykonywane równolegle lub sekwencyjnie.
        </p>

        <h3>Step</h3>
        <p>
          Step to pojedynczy krok w jobie. Może być akcją (action) lub poleceniem shell.
        </p>

        <h3>Action</h3>
        <p>
          Action to wielokrotnie używany kawałek kodu, który można wykorzystać w workflow. 
          Może być napisany przez społeczność lub przez Ciebie.
        </p>

        <h3>Runner</h3>
        <p>
          Runner to serwer, który wykonuje workflow. GitHub zapewnia hosted runners 
          lub możesz używać własnych self-hosted runners.
        </p>

        <h2>3. Struktura pliku workflow</h2>
        
        <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mb-4">
          <pre><code>name: Przykładowy Workflow

# Kiedy workflow ma się uruchomić
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Zmienne środowiskowe dostępne dla wszystkich jobs
env:
  NODE_VERSION: '18'

# Jobs definiują co ma być wykonane
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test</code></pre>
        </div>

        <h2>4. Tworzenie pierwszego workflow</h2>
        
        <h3>Krok 1: Utworzenie katalogu</h3>
        <p>
          W głównym katalogu repozytorium utwórz folder <code>.github/workflows/</code>
        </p>

        <h3>Krok 2: Utworzenie pliku YAML</h3>
        <p>
          Utwórz plik o nazwie <code>ci.yml</code> w katalogu workflows:
        </p>

        <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mb-4">
          <pre><code>name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: npm run build
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info</code></pre>
        </div>

        <h2>5. Popularne akcje i ich zastosowania</h2>
        
        <h3>actions/checkout@v4</h3>
        <p>
          Pobiera kod z repozytorium do środowiska runnera. 
          Jest to zazwyczaj pierwszy krok w większości workflow.
        </p>

        <h3>actions/setup-node@v4</h3>
        <p>
          Konfiguruje środowisko Node.js z określoną wersją. 
          Obsługuje również cache'owanie zależności npm/yarn.
        </p>

        <h3>actions/cache@v3</h3>
        <p>
          Pozwala na cache'owanie plików i folderów między uruchomieniami workflow, 
          co znacznie przyspiesza procesy budowania.
        </p>

        <h3>actions/upload-artifact@v3</h3>
        <p>
          Umożliwia przekazywanie plików między jobami w ramach tego samego workflow.
        </p>

        <h3>actions/download-artifact@v3</h3>
        <p>
          Pobiera artefakty przekazane przez upload-artifact.
        </p>

        <h2>6. Zaawansowane funkcje</h2>
        
        <h3>Matrix Strategy</h3>
        <p>
          Pozwala na uruchomienie joba w wielu konfiguracjach jednocześnie:
        </p>

        <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mb-4">
          <pre><code>strategy:
  matrix:
    os: [ubuntu-latest, windows-latest, macos-latest]
    node-version: [16, 18, 20]
    include:
      - os: ubuntu-latest
        node-version: 21
        experimental: true</code></pre>
        </div>

        <h3>Conditional Steps</h3>
        <p>
          Wykonywanie kroków w zależności od warunków:
        </p>

        <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mb-4">
          <pre><code>- name: Deploy to production
  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  run: npm run deploy:prod

- name: Deploy to staging
  if: github.ref == 'refs/heads/develop'
  run: npm run deploy:staging</code></pre>
        </div>

        <h3>Secrets</h3>
        <p>
          Bezpieczne przechowywanie i używanie danych wrażliwych:
        </p>

        <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mb-4">
          <pre><code>- name: Deploy to server
  env:
    DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
    API_TOKEN: ${{ secrets.API_TOKEN }}
  run: |
    echo "Deploying with secure credentials"
    # Twój kod wdrożenia</code></pre>
        </div>

        <h2>7. Workflow dla projektu FireLog</h2>
        
        <p>
          Oto przykład kompletnego workflow dla projektu FireLog, który obejmuje testy, 
          budowanie i wdrażanie:
        </p>

        <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mb-4">
          <pre><code>name: FireLog CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run ESLint
      run: pnpm lint
      
    - name: Run TypeScript check
      run: pnpm type-check
      
    - name: Run unit tests
      run: pnpm test:unit
      
    - name: Run E2E tests
      run: pnpm test:e2e
      
    - name: Build project
      run: pnpm build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/
        retention-days: 7

  deploy-staging:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to staging
      env:
        DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
      run: |
        echo "Deploying to staging environment"
        # Tutaj kod wdrożenia na staging

  deploy-production:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to production
      env:
        DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
      run: |
        echo "Deploying to production environment"
        # Tutaj kod wdrożenia na produkcję</code></pre>
        </div>

        <h2>8. Najlepsze praktyki</h2>
        
        <h3>Bezpieczeństwo</h3>
        <ul>
          <li>Używaj secrets do przechowywania danych wrażliwych</li>
          <li>Ograniczaj uprawnienia tokenów do minimum</li>
          <li>Regularnie rotuj klucze i hasła</li>
          <li>Używaj dependabot do aktualizacji zależności</li>
        </ul>

        <h3>Wydajność</h3>
        <ul>
          <li>Cache'uj zależności i artefakty</li>
          <li>Używaj matrix strategy dla równoległego wykonywania</li>
          <li>Minimalizuj liczbę kroków w workflow</li>
          <li>Używaj odpowiednich runnerów dla zadań</li>
        </ul>

        <h3>Utrzymywalność</h3>
        <ul>
          <li>Dokumentuj workflow i ich cele</li>
          <li>Używaj znaczących nazw dla kroków</li>
          <li>Dziel duże workflow na mniejsze, specjalizowane</li>
          <li>Testuj workflow przed wdrożeniem</li>
        </ul>

        <h2>9. Debugowanie i rozwiązywanie problemów</h2>
        
        <h3>Częste problemy</h3>
        <ul>
          <li><strong>Timeout</strong> - zwiększ limit czasu dla joba</li>
          <li><strong>Permission denied</strong> - sprawdź uprawnienia i secrets</li>
          <li><strong>Cache miss</strong> - zweryfikuj klucze cache</li>
          <li><strong>Matrix failure</strong> - sprawdź konfigurację matrix</li>
        </ul>

        <h3>Narzędzia debugowania</h3>
        <ul>
          <li>Logi workflow w zakładce Actions</li>
          <li>act - lokalne testowanie workflow</li>
          <li>GitHub CLI - zarządzanie workflow z terminala</li>
          <li>Visual Studio Code - rozszerzenia GitHub Actions</li>
        </ul>

        <h2>10. Przydatne zasoby</h2>
        
        <h3>Dokumentacja</h3>
        <ul>
          <li><a href="https://docs.github.com/en/actions" target="_blank" rel="noopener">Oficjalna dokumentacja GitHub Actions</a></li>
          <li><a href="https://github.com/actions" target="_blank" rel="noopener">Oficjalne akcje GitHub</a></li>
          <li><a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">GitHub Marketplace</a></li>
        </ul>

        <h3>Społeczność</h3>
        <ul>
          <li><a href="https://github.com/actions/starter-workflows" target="_blank" rel="noopener">Starter Workflows</a></li>
          <li><a href="https://github.com/actions/awesome-actions" target="_blank" rel="noopener">Awesome Actions</a></li>
          <li><a href="https://github.com/nektos/act" target="_blank" rel="noopener">act - lokalne testowanie</a></li>
        </ul>

        <h2>11. Podsumowanie</h2>
        <p>
          GitHub Actions to potężne narzędzie do automatyzacji procesów CI/CD. 
          Dzięki jego elastyczności i integracji z GitHub, możesz znacznie usprawnić 
          procesy rozwoju oprogramowania w projekcie FireLog.
        </p>
        
        <p>
          Zacznij od prostych workflow i stopniowo dodawaj bardziej zaawansowane funkcje. 
          Pamiętaj o najlepszych praktykach bezpieczeństwa i wydajności, 
          a GitHub Actions stanie się nieodłączną częścią Twojego procesu rozwoju.
        </p>
      </div>
    </div>

    <!-- Footer -->
    <Footer />
  </div>
</Layout>

<style>
  .prose h2 {
    color: var(--md-sys-color-on-surface);
    margin-top: 2rem;
    margin-bottom: 1rem;
  }
  
  .prose h3 {
    color: var(--md-sys-color-on-surface);
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
  }
  
  .prose p {
    color: var(--md-sys-color-on-surface-variant);
    line-height: 1.6;
    margin-bottom: 1rem;
  }
  
  .prose ul {
    color: var(--md-sys-color-on-surface-variant);
    margin-bottom: 1rem;
  }
  
  .prose li {
    margin-bottom: 0.5rem;
  }
  
  .prose strong {
    color: var(--md-sys-color-on-surface);
  }
  
  .prose code {
    background-color: var(--md-sys-color-surface-variant);
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875rem;
  }
  
  .prose pre {
    background-color: var(--md-sys-color-surface-variant);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
  }
  
  .prose pre code {
    background-color: transparent;
    padding: 0;
  }
  
  .prose a {
    color: var(--md-sys-color-primary);
    text-decoration: underline;
  }
  
  .prose a:hover {
    color: var(--md-sys-color-primary);
    opacity: 0.8;
  }
</style>
