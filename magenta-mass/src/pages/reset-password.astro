---
// Strona resetowania hasła - ustawienie nowego hasła
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Alert, AlertDescription } from '../components/ui/alert';

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<Layout 
  title="Ustaw nowe hasło" 
  description="Ustaw nowe hasło do swojego konta FireLog"
  keywords="resetowanie hasła, nowe hasło, OSP, straż pożarna"
>
  <div class="min-h-screen bg-background flex flex-col">
    <!-- Header -->
    <Header currentPath="/reset-password" />
    
    <!-- Reset Password Section -->
    <section class="flex-1 flex items-center justify-center p-4 sm:p-8">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div class="w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg">
            <span class="material-icons text-primary-foreground text-3xl">lock</span>
          </div>
          <CardTitle className="text-2xl">Ustaw nowe hasło</CardTitle>
          <CardDescription>
            Wprowadź nowe hasło dla swojego konta
          </CardDescription>
        </CardHeader>
        
        <CardContent>
          <!-- Message container -->
          <Alert id="message" className="hidden mb-6">
            <AlertDescription id="messageText"></AlertDescription>
          </Alert>

          <!-- Info Alert -->
          <Alert className="mb-6">
            <AlertDescription>
              Hasło musi zawierać: wielką i małą literę, cyfrę, znak specjalny oraz mieć co najmniej 8 znaków.
            </AlertDescription>
          </Alert>

          <!-- Reset Password Form -->
          <form id="resetPasswordForm" class="space-y-6">
            <!-- Password -->
            <div class="space-y-2">
              <Label htmlFor="password">Nowe hasło</Label>
              <Input
                type="password"
                id="password"
                name="password"
                required
                autoComplete="new-password"
                placeholder="Wprowadź nowe hasło"
              />
              <p class="text-xs text-muted-foreground">
                Hasło musi zawierać: wielką i małą literę, cyfrę, znak specjalny
              </p>
            </div>

            <!-- Confirm Password -->
            <div class="space-y-2">
              <Label htmlFor="confirmPassword">Potwierdź hasło</Label>
              <Input
                type="password"
                id="confirmPassword"
                name="confirmPassword"
                required
                autoComplete="new-password"
                placeholder="Wprowadź hasło ponownie"
              />
            </div>

            <!-- Submit Button -->
            <Button
              type="submit"
              id="submitBtn"
              className="w-full"
            >
              <span class="material-icons mr-2">check_circle</span>
              Ustaw nowe hasło
            </Button>
          </form>

          <!-- Links -->
          <div class="mt-8 text-center space-y-4">
            <Button variant="link" asChild className="p-0 h-auto">
              <a href="/login">← Powrót do logowania</a>
            </Button>
          </div>
        </CardContent>
      </Card>
    </section>

    <!-- Footer -->
    <Footer showBackToTop={false} />
  </div>
</Layout>

<script define:vars={{ supabaseUrl, supabaseAnonKey }}>
  import { createClient } from '@supabase/supabase-js';

  const form = document.getElementById('resetPasswordForm');
  const messageDiv = document.getElementById('message');
  const messageText = document.getElementById('messageText');
  const submitBtn = document.getElementById('submitBtn');

  // Create Supabase client
  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  function showMessage(message, isError = false) {
    if (messageText) {
      messageText.textContent = message;
    }
    if (messageDiv) {
      messageDiv.classList.remove('hidden');
      messageDiv.className = isError ? 'bg-destructive/10 text-destructive border-destructive' : 'bg-green-50 text-green-800 border-green-300';
      messageDiv.style.display = 'block';
      // Scroll to message
      messageDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
  }

  function hideMessage() {
    if (messageDiv) {
      messageDiv.classList.add('hidden');
      messageDiv.style.display = 'none';
    }
  }

  // Check if we need to exchange token from URL hash to session
  // Supabase adds tokens in URL hash when user clicks reset link
  async function initializePasswordReset() {
    try {
      // Get session from URL hash (access_token, refresh_token, etc.)
      const { data, error } = await supabase.auth.getSession();
      
      if (error) {
        console.error('Session error:', error);
      }
      
      // Also try to get session from URL if not already in session
      if (!data.session) {
        // Check URL hash for tokens
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        const accessToken = hashParams.get('access_token');
        const refreshToken = hashParams.get('refresh_token');
        
        if (accessToken && refreshToken) {
          // Set the session
          await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken
          });
        }
      }
    } catch (err) {
      console.error('Error initializing password reset:', err);
    }
  }

  // Initialize on page load
  initializePasswordReset();

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    hideMessage();

    const formData = new FormData(form);
    const password = formData.get('password');
    const confirmPassword = formData.get('confirmPassword');

    if (password !== confirmPassword) {
      showMessage('❌ Hasła nie są identyczne', true);
      return;
    }

    if (password.length < 8) {
      showMessage('❌ Hasło musi mieć co najmniej 8 znaków', true);
      return;
    }

    const hasUpperCase = /[A-Z]/.test(password);
    const hasLowerCase = /[a-z]/.test(password);
    const hasNumber = /\d/.test(password);
    const hasSpecial = /[!@#$%^&*(),.?":{}|<>]/.test(password);

    if (!hasUpperCase || !hasLowerCase || !hasNumber || !hasSpecial) {
      showMessage('❌ Hasło musi zawierać: wielką i małą literę, cyfrę oraz znak specjalny', true);
      return;
    }

    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="material-icons" style="font-size: 18px;">hourglass_empty</span>Resetowanie...';

    try {
      // First, ensure we have a session from URL
      const { data: sessionData } = await supabase.auth.getSession();
      
      if (!sessionData.session) {
        // Try to get from URL hash one more time
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        const accessToken = hashParams.get('access_token');
        const refreshToken = hashParams.get('refresh_token');
        
        if (!accessToken || !refreshToken) {
          throw new Error('Brak tokena resetowania hasła w URL. Upewnij się, że używasz linku z emaila.');
        }
        
        // Set session from URL tokens
        const { data: setSessionData, error: setSessionError } = await supabase.auth.setSession({
          access_token: accessToken,
          refresh_token: refreshToken
        });
        
        if (setSessionError || !setSessionData.session) {
          throw new Error('Nie można ustawić sesji z tokena. Link może być nieprawidłowy lub wygasły.');
        }
      }

      // Get current session with tokens
      const { data: currentSession } = await supabase.auth.getSession();
      if (!currentSession.session?.access_token) {
        throw new Error('Brak tokena resetowania hasła. Upewnij się, że używasz linku z emaila.');
      }

      // Update password directly using Supabase client (has session context)
      const { data: updateData, error: updateError } = await supabase.auth.updateUser({
        password: password
      });

      if (updateError) {
        console.error('Password reset error:', updateError);
        const errorMessage = updateError.message || 'Nie udało się zresetować hasła';
        if (errorMessage.includes('session') || errorMessage.includes('token') || errorMessage.includes('expired') || errorMessage.includes('JWT') || errorMessage.includes('Invalid')) {
          showMessage('❌ Link resetowania hasła jest nieprawidłowy lub wygasł. Poproś o nowy link.', true);
        } else {
          showMessage(`❌ ${errorMessage}`, true);
        }
      } else {
        // Password updated successfully - verify and sign out to invalidate old session
        console.log('Password reset successful, signing out...');
        
        // Sign out to invalidate the old session
        const { error: signOutError } = await supabase.auth.signOut();
        if (signOutError) {
          console.error('Sign out error:', signOutError);
          // Continue anyway - password was updated
        }
        
        // Clear URL hash to remove tokens
        window.history.replaceState(null, '', window.location.pathname);
        
        // Clear any local storage related to auth
        localStorage.removeItem('supabase.auth.token');
        
        showMessage('✅ Hasło zostało pomyślnie zmienione! Przekierowywanie do strony logowania...', false);
        form.reset();
        
        // Redirect to login with success message
        setTimeout(() => {
          window.location.href = '/login?passwordReset=success';
        }, 2000);
      }

    } catch (error) {
      console.error('Reset password error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Nieznany błąd';
      showMessage(`❌ ${errorMessage}`, true);
    } finally {
      submitBtn.disabled = false;
      submitBtn.innerHTML = '<span class="material-icons" style="font-size: 18px;">check_circle</span>Ustaw nowe hasło';
    }
  });
</script>
